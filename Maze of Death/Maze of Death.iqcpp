{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT6, 1, false);\nmotor RightDriveSmart = motor(PORT1, 1, true);\ngyro DrivetrainGyro = gyro(PORT4, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 200);\n\ntouchled SideLED = touchled(PORT3);\ntouchled RightLED = touchled(PORT5);\ntouchled LeftLED = touchled(PORT12);\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate();\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.driveFor(forward, 1800.0, mm, true);\n  Drivetrain.turnFor(left, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 500.0, mm, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 750.0, mm, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 900.0, mm, true);\n  Drivetrain.turnToRotation(270.0, degrees, true);\n  Drivetrain.driveFor(forward, 900.0, mm, true);\n  Drivetrain.turnFor(left, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 350, mm, true);\n  Drivetrain.driveFor(reverse, 2450.0, mm, true);\n  return 0;\n}\n\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[6,1,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[3],"name":"SideLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[5],"name":"RightLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[12],"name":"LeftLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}